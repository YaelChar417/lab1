<div class="content">
    <div class="card">
        <div class="card-content">
            <h1>Preguntas a responder:</h1>

            <h2>Describe el archivo package.json:</h2>
            <p>El package.json es un archivo de mucha importancia cuando se usa node.js, ya que este se necesita para definir  y manejar las características de un proyecto desarrollado con este entorno. Como lo indica su nombre tiene una estructura en formato JSON, JavaScript Object Notation y contiene datos como el nombre, version, licencia, autor y mucho más del proyecto.</p>
            <p>En el package.json también se pueden definir scripts que faciliten la ejecución de tares comunes en el proyecto ,como iniciar el servidor, compilar codigo o ejecutar pruebas, etc, que pueden ser llamados con el comando <strong>npm run </strong></p>
            <p>Por último, generalmente el archivo package.json no se incluye en los repositorios de github incluso cuando es muy importante, esto se debe principalmente a dos razones:</p>
            <ul>
                <li>Reducir el tamaño del repositorio, ya que es un archivo que esta en constante cambio</li>
                <li>Facil de generar, cualquiera puede ejecutar el comando npm install para descargar las dependencias</li>
            </ul>
            <h2>Fuentes bibliograficas:</h2>
            <p>Casero, A. (2024, 18 marzo). La importancia del package.json | KeepCoding Bootcamps. KeepCoding Bootcamps. <a target="_blank" href="https://keepcoding.io/blog/la-importancia-del-package-json/">https://keepcoding.io/blog/la-importancia-del-package-json/</a></p>

            <h2>¿Qué otros templating engines existen para node?</h2>
            <p>Los templates engines nos ayudan a renderizar las paginas con contenido dinámico y tienen la principal función es que son muy flexibles, lo que permite que podamos reusar codigo para las páginas web de una manera muy rapida.</p>
            <p>Si bien no se tiene un cifra exacta por la gran cantidad de actualizaciones que tiene Node.js, si podemos fijarnos en los más populares, que son: </p>
            <ul>
                <li>Pug</li>
                <li>EJS</li>
                <li>Handlebars</li>
                <li>Nunjacks</li>
                <li>doT</li>
                <li>Mustache</li>
                <li>Underscore</li>
                <li>Marko</li>
                <li>Eta</li>
                <li>Liquid</li>
            </ul>
            <p>naukri (2024, marzo). Code 360 by Coding Ninjas. 2024 Naukri.com. <a target="_blank" href="https://www.naukri.com/code360/library/template-engines-in-node-js">https://www.naukri.com/code360/library/template-engines-in-node-js</a></p>
            
            <h2>¿Qué beneficios encuentras en el estilo MVC?</h2>
            <ul>
                <li>
                    Tienes una mejor organización del codigo ya que se separa en distintos archivos que desempeñan una unica funcion
                </li>
                <li>
                    Por lo mismo de desarrollar una unica función es fácil identificar que capa es la que esta teniendo un error para arreglarlo
                </li>
                <li>
                    Cada archivo de codigo contiene muy pocas lineas de codigo
                </li>
                <li>
                    Permite una mayor escalabilidad ya que si deseas hacer un cambio solo debes modificar un solo archivo
                </li>
            </ul>

            <h2>¿Encuentras alguna desventaja en el estilo arquitectónico MVC?</h2>
            <ul>
                <li>
                    Al tener muchos archivos después puede ser confuso encontrar un archivo en especifico.
                </li>
                <li>
                    No es muy util para proyectos muy sencillos, ya que debes generar una gran cantidad de archivos que tengan pocas lineas de codigos, como es el ejemplo de /controllers/pregunta.js
                </li>
            </ul>
        </div>
    </div>
</div>